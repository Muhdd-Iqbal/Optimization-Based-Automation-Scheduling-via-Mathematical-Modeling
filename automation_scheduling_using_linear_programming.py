# -*- coding: utf-8 -*-
"""Automation Scheduling using Linear Programming.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10-YDoI1BqbdQgcJQdW-0RHFPq467HL3E
"""

from pulp import *
import pandas as pd
import numpy as np
from itertools import product

# Example of data input
list_employee = {
    "name": [ "Andi", "Budi", "Rizky", "Agus", "Eko", "Fajar", "Hendra", "Malik", "Teguh",
              "Bayu", "Rian", "Ilham", "Dimas", "Arif", "Wahyu", "Joko", "Galih", "Doni",
              "Taufik", "Yoga", "Reza", "Fikri", "Rama", "Eros", "Fauzi", "Imam", "Adi",
              "Siti", "Dewi", "Indah", "Utari", "Lina", "Ayu", "Mega", "Rina", "Melati",
              "Nina", "Wulan", "Putri", "Lestari","Viona","Kiko","Bonar","Hengki","Lita"],
    "gender" : ["Men","Men","Men","Men","Men","Men","Men","Men","Men",
                "Men","Men","Men","Men","Men","Men","Men","Men","Men",
                "Men","Men","Men","Men","Men","Men","Men","Men","Men",
                "Women","Women","Women","Women","Women","Women","Women","Women","Women",
                "Women","Women","Women","Women","Women","Men","Men","Men","Women"
                ]}

list_leave =  {
  "name": ["Malik", "Utari", "Kiko"],
  "day": ["Thursday","Saturday","Monday"],
  "week": ["Week 2","Week 3","Week 5"],
  "request_timeoff": ["On Leave","On Leave", "On Leave"]
}

convert_day = {
    "Monday": 0,
    "Tuesday": 1,
    "Wednesday": 2,
    "Thursday": 3,
    "Friday": 4,
    "Saturday": 5,
    "Sunday": 6
}

convert_week = {
    "Week 1": 0,
    "Week 2": 1,
    "Week 3": 2,
    "Week 4": 3,
    "Week 5" : 4
}

class AutomationScheduling:
  def __init__(self, list1, list2, list3, list4):
    self.list_employee = list1
    self.list_leave = list2
    self.convert_day = list3
    self.convert_week = list4

  def DataPreparation(self):
    self.df_employee = pd.DataFrame(self.list_employee)
    self.leave_data = pd.DataFrame(self.list_leave)
    self.leave_data['day'] = self.leave_data['day'].map(self.convert_day)
    self.leave_data['week'] = self.leave_data['week'].map(self.convert_week)

  def Scheduling(self, day, week):
    i_e = self.df_employee['name'].tolist()
    d_e = list(range(0,day))
    w_e = list(range(0,week))

    model = LpProblem("auto_scheduling", LpMinimize)

    s1 = LpVariable.dicts("s1", (i_e,d_e), 0, 1, cat='Binary')
    s2 = LpVariable.dicts("s2", (i_e,d_e), 0, 1, cat='Binary')
    s3 = LpVariable.dicts("s3", (i_e,d_e), 0, 1, cat='Binary')

    sd = LpVariable.dicts("sd", (i_e,d_e), 0, 1, cat='Binary')

    sw1 = LpVariable.dicts("sw1", (i_e,w_e), 0, 1, cat='Binary')
    sw2 = LpVariable.dicts("sw2", (i_e,w_e), 0, 1, cat='Binary')
    sw3 = LpVariable.dicts("sw3", (i_e,w_e), 0, 1, cat='Binary')

    #optimization function
    model += lpSum([s1[i][d] + s2[i][d] + s3[i][d] for i,d in product(i_e,d_e)])

    # Weekdays target
    for w in w_e:
      for d in range(0,5):
        model += lpSum([s1[i][w+d] for i in i_e]) >= 10
        model += lpSum([s2[i][w+d] for i in i_e]) >= 10
        model += lpSum([s3[i][w+d] for i in i_e]) >= 10

    # Weekends target
    for w in w_e:
      for d in range(5,7):
        model += lpSum([s1[i][w+d] for i in i_e]) >= 9
        model += lpSum([s2[i][w+d] for i in i_e]) >= 8
        model += lpSum([s3[i][w+d] for i in i_e]) >= 8

    # Each employee should work only 1 shift type every day
    for i in i_e:
        for d in d_e:
            model += s1[i][d] + s2[i][d] + s3[i][d] <= 1*sd[i][d]

    # Do not work 5 consecutive days
    for i in i_e:
      for w in list(range(0,35,7)):
        if len(leave_data[(leave_data['name']==i)&(leave_data['week']==w//7)]) > 0:
          model += s1[i][0+w] + s1[i][1+w] + s1[i][2+w] + s1[i][3+w] + s1[i][4+w] + s1[i][5+w] + s1[i][6+w]  == (5-len(leave_data[(leave_data['name']==i)&(leave_data['week']==w//7)]))*sw1[i][w//7]
          model += s2[i][0+w] + s2[i][1+w] + s2[i][2+w] + s2[i][3+w] + s2[i][4+w] + s2[i][5+w] + s2[i][6+w]  == (5-len(leave_data[(leave_data['name']==i)&(leave_data['week']==w//7)]))*sw2[i][w//7]
          model += s3[i][0+w] + s3[i][1+w] + s3[i][2+w] + s3[i][3+w] + s3[i][4+w] + s3[i][5+w] + s3[i][6+w]  == (5-len(leave_data[(leave_data['name']==i)&(leave_data['week']==w//7)]))*sw3[i][w//7]
        else:
          model += s1[i][0+w] + s1[i][1+w] + s1[i][2+w] + s1[i][3+w] + s1[i][4+w] + s1[i][5+w] + s1[i][6+w]  == 5*sw1[i][w//7]
          model += s2[i][0+w] + s2[i][1+w] + s2[i][2+w] + s2[i][3+w] + s2[i][4+w] + s2[i][5+w] + s2[i][6+w]  == 5*sw2[i][w//7]
          model += s3[i][0+w] + s3[i][1+w] + s3[i][2+w] + s3[i][3+w] + s3[i][4+w] + s3[i][5+w] + s3[i][6+w]  == 5*sw3[i][w//7]

    # Only 1 shift type every week
    for i in i_e:
      for w in w_e:
        model += sw1[i][w] + sw2[i][w] + sw3[i][w] == 1

    # If empoyees request leave
    for i in i_e:
      for d in d_e:
        for e in range(len(leave_data['name'])):
          if i == leave_data['name'][e] and d == leave_data['day'][e]+(7*leave_data['week'][e]):
            model += s1[i][d] + s2[i][d] + s3[i][d] == 0


    # If employees work in shift 3, they do not work in shift 1 in the next day
    for i in i_e:
      for w in w_e[:-1]:
        model += sw3[i][w]+sw1[i][w+1] <= 1

    # Employees should work with different shift type every week
    for i in i_e:
      for w in w_e[:-1]:
        model += sw1[i][w]+sw1[i][w+1] <= 1
        model += sw2[i][w]+sw2[i][w+1] <= 1
        model += sw3[i][w]+sw3[i][w+1] <= 1

    # do not work more than 5 consecutive days
    for i in i_e:
      for d in d_e[:-6]:
          model += sd[i][d] + sd[i][d+1] + sd[i][d+2] + sd[i][d+3] + sd[i][d+4] + sd[i][d+5] <= 5

    # Avoid pattern
    for i in i_e:
      for d in d_e[:-2]:
          model += sd[i][d] + sd[i][d+2] >= 1

    status=model.solve()
    checking=LpStatus[status]

    #store the results
    self.sh1 = [s1[i][d].name for i,d in product(i_e,d_e)]
    self.val1 = [s1[i][d].varValue for i,d in product(i_e,d_e)]
    self.sh2 = [s2[i][d].name for i,d in product(i_e,d_e)]
    self.val2 = [s2[i][d].varValue for i,d in product(i_e,d_e)]
    self.sh3 = [s3[i][d].name for i,d in product(i_e,d_e)]
    self.val3 = [s3[i][d].varValue for i,d in product(i_e,d_e)]

    self.df = pd.DataFrame({'shift_1': self.sh1, 'val_shift_1': self.val1, 'shift_2': self.sh2, 'val_shift_2': self.val2, 'shift_3': self.sh3, 'val_shift_3': self.val3})

  def CombineData(self):
    self.df['name'] = [self.df['shift_1'].str.split('_')[i][1] for i in range(len(self.df))]
    self.df['day'] = [int(self.df['shift_1'].str.split('_')[i][2]) for i in range(len(self.df))]
    self.leave_data['day_number'] = self.leave_data['day']+(7*self.leave_data['week'])

  def CreateSchedule(self):
    working_shift = []

    df_with_leave = pd.merge(self.df, self.leave_data[['name','day_number','request_timeoff']], left_on=['name','day'], right_on=['name','day_number'], how='left')

    for i in range(len(df_with_leave)):
        if df_with_leave['request_timeoff'].notna()[i]:
          working_shift.append(df_with_leave['request_timeoff'][i])
        else:
          if df_with_leave['val_shift_1'][i] == 1 and df_with_leave['val_shift_2'][i] == 0 and df_with_leave['val_shift_3'][i] == 0:
              working_shift.append('Shift 1')
          elif df_with_leave['val_shift_1'][i] == 0 and df_with_leave['val_shift_2'][i] == 1 and df_with_leave['val_shift_3'][i] == 0:
              working_shift.append('Shift 2')
          elif df_with_leave['val_shift_1'][i] == 0 and df_with_leave['val_shift_2'][i] == 0 and df_with_leave['val_shift_3'][i] == 1:
              working_shift.append('Shift 3')
          else:
              working_shift.append('Day Off')

    df_with_leave['working_shift'] = working_shift
    df_with_leave['day'] = df_with_leave['day']+1

    new_df = df_with_leave[~df_with_leave['working_shift'].str.contains('Day Off')].reset_index()
    schedule = pd.pivot_table(new_df, values=['working_shift'], index=['name'], columns=['day'],aggfunc=lambda x: ' '.join(x))
    schedule.columns = schedule.columns.droplevel(0)
    final_schedule = schedule.reset_index().rename_axis(None, axis=1).replace(np.nan, 'Day Off')
    list_gender = self.df_employee.sort_values(by='name')['gender'].tolist()
    final_schedule.insert(loc=1, column='gender', value=list_gender)
    final_schedule.insert(loc=2, column='position', value='Production Operator')

    # Rename Column
    final_schedule.rename(columns={col: f'Day {col}' for col in final_schedule.columns if isinstance(col, (int, float)) or str(col).isdigit()}, inplace=True)
    return final_schedule

  def run_all(self):
    self.DataPreparation()
    self.Scheduling(35, 5)
    self.CombineData()
    self.CreateSchedule()

# Run the model
run_model = AutomationScheduling(list_employee, list_leave, convert_day, convert_week)
run_model.run_all()
final_scheduling = run_model.CreateSchedule()
final_scheduling